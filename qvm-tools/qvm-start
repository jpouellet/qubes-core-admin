#!/usr/bin/python2
# -*- coding: utf-8 -*-
#
# The Qubes OS Project, http://www.qubes-os.org
#
# Copyright (C) 2010  Joanna Rutkowska <joanna@invisiblethingslab.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
#

from qubes.qubes import QubesVmCollection
from qubes.qubes import QubesException
from optparse import OptionParser
from qubes.notify import tray_notify,tray_notify_error,tray_notify_init
import subprocess
import os
import sys

notify_object = None

def tray_notify_generic(level, str):
    if level == "info":
        tray_notify(str, label=vm.label)
    elif level == "error":
        tray_notify_error(str)

def main():
    usage = "usage: %prog [options] <vm-name>"
    parser = OptionParser (usage)
    parser.add_option ("-q", "--quiet", action="store_false", dest="verbose", default=True)
    parser.add_option ("--tray", action="store_true", dest="tray", default=False,
                       help="Use tray notifications instead of stdout" )
    parser.add_option ("--no-guid", action="store_true", dest="noguid", default=False,
		      help="Do not start the GUId (ignored)")
    parser.add_option ("--drive", dest="drive", default=None,
                      help="Temporarily attach specified drive as CD/DVD or hard disk (can be specified with prefix 'hd:' or 'cdrom:', default is cdrom)")
    parser.add_option ("--hddisk", dest="drive_hd", default=None,
                      help="Temporarily attach specified drive as hard disk")
    parser.add_option ("--cdrom", dest="drive_cdrom", default=None,
                      help="Temporarily attach specified drive as CD/DVD")
    parser.add_option ("--install-windows-tools", action="store_true", dest="install_windows_tools", default=False,
                      help="Attach Windows tools CDROM to the VM")
    parser.add_option ("--dvm", action="store_true", dest="preparing_dvm", default=False,
                      help="Do actions necessary when preparing DVM image")
    parser.add_option ("--custom-config", action="store", dest="custom_config", default=None,
                      help="Use custom Xen config instead of Qubes-generated one")
    parser.add_option("--skip-if-running", action="store_true",
                      dest="skip_if_running", default=False,
                      help="Do not fail if the VM is already running")
    parser.add_option ("--debug", action="store_true", dest="debug", default=False,
                      help="Enable debug mode for this VM (until its shutdown)")

    (options, args) = parser.parse_args ()
    if (len (args) != 1):
        parser.error ("You must specify VM name!")
    vmname = args[0]

    if options.tray:
        tray_notify_init()

    qvm_collection = QubesVmCollection()
    qvm_collection.lock_db_for_reading()
    qvm_collection.load()
    qvm_collection.unlock_db()

    vm = qvm_collection.get_vm_by_name(vmname)
    if vm is None:
        print >> sys.stderr, "A VM with the name '{0}' does not exist in the system.".format(vmname)
        exit(1)

    if bool(options.drive_hd) + bool(options.drive_cdrom) + bool(options.drive) + bool(options.install_windows_tools) > 1:
        print >> sys.stderr, "Only one of --drive, --cdrom, --hddisk, --install-windows-tools can be specified"
        exit(1)

    if options.install_windows_tools:
        windows_tools_path = '/usr/lib/qubes/qubes-windows-tools.iso'
        if not os.path.exists(windows_tools_path):
            print >> sys.stderr, "You need to install 'qubes-windows-tools' " \
                                 "package in dom0 first"
            exit(1)
        options.drive = 'cdrom:dom0:{}'.format(windows_tools_path)

    if options.drive_hd:
        options.drive = 'hd:' + options.drive_hd

    if options.drive_cdrom:
        options.drive = 'cdrom:' + options.drive_cdrom

    if options.drive:
        if hasattr(vm, 'drive'):
            vm.drive = options.drive
        else:
            print >> sys.stderr, "This VM does not support attaching drives"
            exit (1)

    if options.custom_config:
        vm.conf_file = options.custom_config

    if options.debug:
        vm.debug = True

    if options.skip_if_running and vm.is_running():
        return

    try:
        vm.verify_files()
        xid = vm.start(verbose=options.verbose, preparing_dvm=options.preparing_dvm, start_guid=not options.noguid, notify_function=tray_notify_generic if options.tray else None)
    except (IOError, OSError, QubesException, MemoryError) as err:
        if options.tray:
            tray_notify_error(str(err))
        else:
            print >> sys.stderr, "ERROR: {0}".format(err)
        exit (1)

    if options.debug:
        print >> sys.stderr, "--> Debug mode enabled. Useful logs: "
        print >> sys.stderr, "    /var/log/xen/console/guest-%s.log" % vmname
        if vm.type.endswith("HVM"):
            print >> sys.stderr, "    /var/log/xen/console/guest-%s_dm.log" % vmname
        print >> sys.stderr, "    /var/log/qubes/guid.%s.log" % vmname
        print >> sys.stderr, "    /var/log/qubes/qrexec.%s.log" % vmname

main()
